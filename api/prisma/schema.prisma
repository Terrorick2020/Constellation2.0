generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(cuid())
  username     String      @unique
  name         String
  password     String
  division     String
  job          String
  role         Role        @default(Guest)
  signatures   Signature[]
  Post         Post[]
  // Chat relations
  sentMessages Message[]   @relation("SentMessages")
  userChats    UserChat[]
}

model Post {
  id         Int         @id @default(autoincrement())
  title      String
  filename   String
  date       DateTime    @default(now())
  hash       String
  content    Bytes
  signatures Signature[]
  delivered  Boolean     @default(false)
  userId     String
  User       User        @relation(fields: [userId], references: [id])

  @@unique([filename])
}

model Signature {
  hash       String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  assignedAt DateTime @default(now())

  @@id([postId, userId])
}

model Notification {
  id          Int    @id @default(autoincrement())
  title       String
  description String
}

// Chat models
model Chat {
  id            String    @id @default(uuid())
  participants  String[] // Array of user IDs
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  lastMessageId String?   @map("last_message_id")
  lastMessageAt DateTime? @map("last_message_at")
  typing        String[]  @default([]) // Array of user IDs who are typing

  messages  Message[]
  userChats UserChat[]

  @@map("chats")
}

model Message {
  id         String   @id @default(uuid())
  chatId     String   @map("chat_id")
  fromUserId String   @map("from_user_id")
  text       String
  mediaType  String?  @map("media_type")
  mediaUrl   String?  @map("media_url")
  fileName   String?  @map("file_name")
  fileSize   Int?     @map("file_size")
  filePath   String?  @map("file_path")
  isRead     Boolean  @default(false) @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  chat     Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  fromUser User @relation("SentMessages", fields: [fromUserId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model UserChat {
  id                String   @id @default(uuid())
  chatId            String   @map("chat_id")
  userId            String   @map("user_id")
  lastReadMessageId String?  @map("last_read_message_id")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@map("user_chats")
}

enum Role {
  Admin
  Guest
}
