<template>
  <div class="flex flex-col gap-[10px] text-sm">
    <div class="flex items-center justify-between">
      <div class="flex items-center gap-x-[10px]">
        <el-avatar :size="48" :src="Avatar" class="border border-black/15" />
        <div class="flex flex-col">
          <!-- TODO: Username -->
          <span class="font-extrabold text-base">Название профиля </span>
          <span class="text-sm opacity-80 leading-[140%]">Название документа </span>
          <!-- TODO: Подразделение -->
          <span class="text-sm opacity-40 leading-[140%]">Подразделение</span>
        </div>
      </div>
      <div v-if="indexPage" class="flex items-center transition-all group-hover:translate-x-[2px] gap-x-[10px]">
        <UIPopoverMenu :list="LIST_OPTIONS" @select="onSelect">
          <template #reference>
            <button>
              <SvgoMoreVertical class="w-6 h-6" filled :font-controlled="false" />
            </button>
          </template>
        </UIPopoverMenu>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import Avatar from '@/assets/image/avatar.png'
import type { TPopoverItemProps } from '~/types/UI/popover'

const props = withDefaults(
  defineProps<{
    indexPage?: boolean
  }>(),
  {
    indexPage: false
  }
)

const LIST_OPTIONS: TPopoverItemProps[] = [
  { key: 'subscribe', label: 'Подписать документ', route: '/subscribe' },
  { key: 'message', label: 'Посмотреть документ', route: '/message' },
  { key: 'block', label: 'Скачать документ', route: '/block' },
  { key: 'copy', label: 'Скопировать ссылку', route: '/copy' },
]

const onSelect = (option: (typeof LIST_OPTIONS)[0]) => {
  console.log('option', option)
  if (option.route) {
    // Переход с использованием window.location.href
    window.location.href = option.route
  }
}
</script>








<template>
  <el-popover
    :show-arrow="false"
    :persistent="false"
    :width="310"
    :hide-after="0"
    v-model:visible="optionsVisible"
    placement="left-start"
    trigger="click"
    popper-class="!p-5 !rounded-2xl !shadow-[0px_0px_50px_0px] !shadow-black/20"
  >
    <template #reference>
      <slot name="reference" />
    </template>
    <template #default>
      <div class="divide-y" v-click-outside="closePopover">
        <button
          v-for="listItem in props.list"
          :key="listItem.key"
          class="flex w-full items-center gap-x-4 py-3 first:pt-0 last:pb-0"
          @click="handleClickOption(listItem)"
        >
          <component
            v-if="listItem.icon"
            :is="`svgo-${listItem.icon}`"
            :font-controlled="false"
            class="size-6 !fill-transparent text-[#E44820]"
          />
          <span class="text-base font-extrabold text-black">
            {{ listItem.label }}
          </span>
        </button>
      </div>
    </template>
  </el-popover>
</template>

<script setup lang="ts">
import { ClickOutside as vClickOutside } from 'element-plus'
import type { TPopoverItemProps } from '~/types/UI/popover'

const optionsVisible = ref(false)

interface Props {
  list: TPopoverItemProps[]
}

const props = defineProps<Props>()
const emit = defineEmits(['select'])

const closePopover = () => {
  optionsVisible.value = false
}

const handleClickOption = (listItem: TPopoverItemProps) => {
  emit('select', listItem)
  closePopover()
}
</script>

-------------------------------------------------------------------------------------------------------

old company 
<!-- ФИЛЬТРЫ -->

<template>
  <div class="flex flex-col gap-[10px] text-sm">
    <div class="flex items-center justify-between">
      <div class="flex items-center gap-x-[10px]">
        <el-avatar :size="48" :src="Avatar" class="border border-black/15" />
        <div class="flex flex-col">
          <!-- TODO: Username -->
          <span class="font-extrabold text-base">Название профиля </span>
          <span class="text-sm opacity-80 leading-[140%]">Название документа </span>
          <!-- TODO: Подразделение -->
          <span class="text-sm opacity-40 leading-[140%]">Подразделение</span> 
        </div>
      </div>
      <div v-if="indexPage" class="flex items-center transition-all group-hover:translate-x-[2px] gap-x-[10px]">
        <!-- <button @click="isFavorite = !isFavorite" title="Подписать">
          <component 
            :is="`svgo-${isFavorite ? 'StarFill' : 'StarOutline'}`"
            :font-controlled="false" 
            class="w-6 h-6" 
            filled
          />
        </button> -->
        <UIPopoverMenu :list="LIST_OPTIONS" @select="onSelect">
          <template #reference>
            <button>
              <SvgoMoreVertical class="w-6 h-6" filled :font-controlled="false" />
            </button>
          </template>
        </UIPopoverMenu>
      </div>
    </div>
    <!-- <div
      class="group flex cursor-pointer items-center justify-between rounded-2xl border border-black/15 px-5 py-[18px]"
      :class="{
        'bg-white': indexPage
      }"
    >
      <div class="flex items-center gap-x-[5px] font-semibold text-sm">
        <SvgoPinLocationOutline class="w-6 h-6" :font-controlled="false" />
        <span class="leading-none">Россия; Москва; Ул. Снежная 16</span>
      </div>
      <div v-if="indexPage" class="transition-all group-hover:translate-x-[2px]">
        <SvgoArrow filled class="rotate-90 transform text-xl" />
      </div>
    </div> -->
  </div>
</template>
<script setup lang="ts">
import Avatar from '@/assets/image/avatar.png'
import type { TPopoverItemProps } from '~/types/UI/popover';

const props = withDefaults(
  defineProps<{
    indexPage?: boolean
  }>(),
  {
    indexPage: false
  }
)

const LIST_OPTIONS: TPopoverItemProps[] = [
  { key: 'subscribe', label: 'Подписать документ'},
  { key: 'message', label: 'Посмтотреть документ' },
  { key: 'block', label: 'Скачать документ' },
  { key: 'copy', label: 'Скопировать ссылку' },
]

const isFavorite = ref(false)

const onSelect = (option: (typeof LIST_OPTIONS)[0]) => {
  console.log('option', option)
}
</script>


old PopoverMenu



<template>
  <el-popover
    :show-arrow="false"
    :persistent="false"
    :width="310"
    :hide-after="0"
    v-model:visible="optionsVisible"
    placement="left-start"
    trigger="click"
    popper-class="!p-5 !rounded-2xl !shadow-[0px_0px_50px_0px] !shadow-black/20"
  >
    <template #reference>
      <slot name="reference" />
    </template>
    <template #default>
      <div class="divide-y" v-click-outside="closePopover">
        <button
          v-for="listItem in props.list"
          :key="listItem.key"
          class="flex w-full items-center gap-x-4 py-3 first:pt-0 last:pb-0"
          @click="handleClickOption(listItem)"
        >
          <component
            v-if="listItem.icon"
            :is="`svgo-${listItem.icon}`"
            :font-controlled="false"
            class="size-6 !fill-transparent text-[#E44820]"
          />
          <span class="text-base font-extrabold text-black">
            {{ listItem.label }}
          </span>
        </button>
      </div>
    </template>
  </el-popover>
</template>

<script setup lang="ts">
import { ClickOutside as vClickOutside } from 'element-plus'
import type { TPopoverItemProps } from '~/types/UI/popover'

const optionsVisible = ref(false)

interface Props {
  list: TPopoverItemProps[]
}

const props = defineProps<Props>()
const emit = defineEmits(['select'])

const closePopover = () => {
  optionsVisible.value = false
}

const handleClickOption = (listItem: TPopoverItemProps) => {
  emit('select', listItem)
  closePopover()
}
</script>
